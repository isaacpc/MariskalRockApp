package com.isaacpc.mariskalrock.bd;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table PODCAST_ENTITY.
 */
public class PodcastEntityDao extends AbstractDao<PodcastEntity, Long> {

    public static final String TABLENAME = "PODCAST_ENTITY";

    /**
     * Properties of entity PodcastEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
	public final static Property Id = new Property(0, Long.class, "id", true, "_id");
	public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
	public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
	public final static Property Link = new Property(3, String.class, "link", false, "LINK");
	public final static Property ImageURL = new Property(4, String.class, "imageURL", false, "IMAGE_URL");
	public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
	public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
	public final static Property Favorite = new Property(7, boolean.class, "favorite", false, "FAVORITE");
    };

    public PodcastEntityDao(DaoConfig config) {
	super(config);
    }

    public PodcastEntityDao(DaoConfig config, DaoSession daoSession) {
	super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
	final String constraint = ifNotExists ? "IF NOT EXISTS " : "";
	db.execSQL("CREATE TABLE " + constraint + "'PODCAST_ENTITY' (" + //
		"'_id' INTEGER PRIMARY KEY ," + // 0: id
		"'TITLE' TEXT NOT NULL ," + // 1: title
		"'AUTHOR' TEXT," + // 2: author
		"'LINK' TEXT NOT NULL ," + // 3: link
		"'IMAGE_URL' TEXT," + // 4: imageURL
		"'DESCRIPTION' TEXT," + // 5: description
		"'DATE' INTEGER NOT NULL ," + // 6: date
		"'FAVORITE' INTEGER NOT NULL );"); // 7: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
	final String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PODCAST_ENTITY'";
	db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PodcastEntity entity) {
	stmt.clearBindings();

	final Long id = entity.getId();
	if (id != null) {
	    stmt.bindLong(1, id);
	}
	stmt.bindString(2, entity.getTitle());

	final String author = entity.getAuthor();
	if (author != null) {
	    stmt.bindString(3, author);
	}
	stmt.bindString(4, entity.getLink());

	final String imageURL = entity.getImageURL();
	if (imageURL != null) {
	    stmt.bindString(5, imageURL);
	}

	final String description = entity.getDescription();
	if (description != null) {
	    stmt.bindString(6, description);
	}
	stmt.bindLong(7, entity.getDate().getTime());
	stmt.bindLong(8, entity.getFavorite() ? 1l : 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
	return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public PodcastEntity readEntity(Cursor cursor, int offset) {
	final PodcastEntity entity = new PodcastEntity(
		cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
			cursor.getString(offset + 1), // title
			cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
				cursor.getString(offset + 3), // link
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageURL
					cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
						new java.util.Date(cursor.getLong(offset + 6)), // date
						cursor.getShort(offset + 7) != 0 // favorite
		);
	return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PodcastEntity entity, int offset) {
	entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
	entity.setTitle(cursor.getString(offset + 1));
	entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
	entity.setLink(cursor.getString(offset + 3));
	entity.setImageURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
	entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
	entity.setDate(new java.util.Date(cursor.getLong(offset + 6)));
	entity.setFavorite(cursor.getShort(offset + 7) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PodcastEntity entity, long rowId) {
	entity.setId(rowId);
	return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(PodcastEntity entity) {
	if (entity != null) {
	    return entity.getId();
	} else {
	    return null;
	}
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
	return true;
    }

}
